const admin = require('firebase-admin');
const path = require('path');

// Inicializar Firebase Admin SDK
const serviceAccountPath = process.env.GOOGLE_APPLICATION_CREDENTIALS || './wrtmin-service-account.json';

try {
  const serviceAccount = require(path.resolve(serviceAccountPath));
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
  console.log('‚úÖ Firebase Admin SDK inicializado');
} catch (error) {
  console.error('‚ùå Erro ao inicializar Firebase Admin SDK:', error.message);
  process.exit(1);
}

const db = admin.firestore();
const notesCollection = 'notas';

async function assignUserIdToNotes(targetUserId) {
  try {
    if (!targetUserId) {
      console.error('‚ùå Erro: userId de destino n√£o fornecido');
      console.log('Uso: node scripts/assign-userid-to-notes.js <userId>');
      process.exit(1);
    }
    
    console.log(`üîÑ Iniciando processo de atribui√ß√£o do userId ${targetUserId} √†s notas...`);
    
    // Buscar notas que n√£o t√™m userId ou t√™m o userId padr√£o
    const snapshot = await db.collection(notesCollection)
      .where('userId', 'in', [null, 'default-user-id'])
      .get();
    
    if (snapshot.empty) {
      console.log('‚ÑπÔ∏è Nenhuma nota encontrada sem userId ou com userId padr√£o');
      return;
    }
    
    console.log(`üìä Encontradas ${snapshot.size} notas para processar`);
    
    let processedCount = 0;
    let updatedCount = 0;
    let errorCount = 0;
    
    // Processar cada nota
    for (const doc of snapshot.docs) {
      try {
        const noteData = doc.data();
        processedCount++;
        
        await doc.ref.update({
          userId: targetUserId,
          favorito: noteData.favorito || false,
          fixado: noteData.fixado || false,
          ordenacao: noteData.ordenacao || 0,
          dataModificacao: new Date().toISOString()
        });
        
        updatedCount++;
        console.log(`‚úÖ Nota ${doc.id} atribu√≠da ao usu√°rio ${targetUserId}`);
        
      } catch (error) {
        errorCount++;
        console.error(`‚ùå Erro ao processar nota ${doc.id}:`, error.message);
      }
    }
    
    console.log('\nüìã Resumo do processamento:');
    console.log(`   Total processado: ${processedCount}`);
    console.log(`   Notas atualizadas: ${updatedCount}`);
    console.log(`   Erros: ${errorCount}`);
    
    if (updatedCount > 0) {
      console.log(`\n‚úÖ ${updatedCount} notas foram atribu√≠das ao usu√°rio ${targetUserId}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  } finally {
    process.exit(0);
  }
}

// Obter userId de destino dos argumentos da linha de comando
const targetUserId = process.argv[2];

// Executar o script
assignUserIdToNotes(targetUserId); 