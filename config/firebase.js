const admin = require('firebase-admin');
const path = require('path');

// Caminho do arquivo de credenciais de servi√ßo
const serviceAccountPath = process.env.GOOGLE_APPLICATION_CREDENTIALS || './wrtmin-service-account.json';

let initialized = false;

const initializeFirebase = () => {
  console.log('üîß Inicializando Firebase...');
  console.log('üìÅ Caminho do arquivo de credenciais:', serviceAccountPath);
  console.log('üîç Verificando se j√° foi inicializado:', initialized);
  console.log('üîç N√∫mero de apps Firebase:', admin.apps.length);
  
  if (!initialized && admin.apps.length === 0) {
    try {
      console.log('üìÇ Carregando arquivo de credenciais...');
      const serviceAccount = require(path.resolve(serviceAccountPath));
      console.log('‚úÖ Arquivo de credenciais carregado');
      console.log('üîß Inicializando app Firebase...');
      
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
      });
      
      initialized = true;
      console.log('‚úÖ Firebase Admin SDK inicializado com credenciais de servi√ßo');
      console.log(`üìÅ Projeto: ${serviceAccount.project_id || 'N/A'}`);
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Firebase Admin SDK:', error.message);
      console.error('üí° Verifique o caminho do arquivo de credenciais de servi√ßo:', serviceAccountPath);
      console.error('üîç Stack trace:', error.stack);
      throw error; // N√£o usar process.exit() em fun√ß√µes serverless
    }
  } else {
    console.log('‚úÖ Firebase j√° inicializado, reutilizando conex√£o');
  }
  
  console.log('üîß Retornando inst√¢ncia do Firestore...');
  return admin.firestore();
};

const getFirestore = () => {
  if (admin.apps.length === 0) {
    throw new Error('Firebase n√£o foi inicializado. Chame initializeFirebase() primeiro.');
  }
  return admin.firestore();
};

module.exports = {
  initializeFirebase,
  getFirestore,
  admin
}; 